services:
  gateway:
    container_name: gateway
    build: ./gateway
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    networks:
      app-network:
        ipv4_address: ${GATEWAY_HOST}
    env_file:
      - .env
    volumes:
      - gateway-data:/app/logs
    restart: always

#Inventory
  inventory-db:
    container_name: inventory-db
    build: ./inventory/db
    ports:
      - "${INVENTORY_DB_PORT}:${INVENTORY_DB_PORT}"
    networks:
      app-network:
        ipv4_address: ${INVENTORY_DB_HOST}
    environment:
      - POSTGRES_PASSWORD=${INVENTORY_DB_PASSWORD}
    env_file:
      - .env
    volumes:
      - ./inventory/db/setup-db.sql:/docker-entrypoint-initdb.d/setup-db.sql
      - inventory-db-data:/var/lib/postgresql/data
    healthcheck:
       test: ["CMD-SHELL", "pg_isready -U ${INVENTORY_DB_USER} -d ${INVENTORY_DB_NAME}"]
       interval: 5s
       timeout: 5s
       retries: 5
    restart: always
  
  inventory:
    container_name: inventory
    build: ./inventory
    ports:
      - "${INVENTORY_PORT}:${INVENTORY_PORT}"
    networks:
      app-network:
        ipv4_address: ${INVENTORY_HOST}
    env_file:
      - .env
    depends_on:
        inventory-db:
          condition: service_healthy
    restart: always

#Billing
  billing-db:
    container_name: billing-db
    build: ./billing/db
    networks:
      app-network:
        ipv4_address: ${BILLING_DB_HOST}
    environment:
      - POSTGRES_PASSWORD=${BILLING_DB_PASSWORD}
    env_file:
      - .env
    volumes:
      - ./billing/db/setup-db.sql:/docker-entrypoint-initdb.d/setup-db.sql
      - billing-db-data:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${BILLING_DB_USER} -d ${BILLING_DB_NAME}"]
        interval: 5s
        timeout: 5s
        retries: 5
    restart: always

  billing:
    container_name: billing
    build: ./billing
    ports:
      - "${BILLING_PORT}:${BILLING_PORT}"
    networks:
      app-network:
        ipv4_address: ${BILLING_HOST}
    env_file:
      - .env
    depends_on:
        billing-db:
          condition: service_healthy 
    restart: always

#RabbitMQ
  rabbitmq:
    container_name: rabbitmq
    build: ./rabbit
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
    networks:
      app-network:
        ipv4_address: ${RABBITMQ_HOST}
    env_file:
      - .env
    restart: always

#Volumes
volumes:
  inventory-db-data:
  billing-db-data:
  gateway-data:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.56.0/24

